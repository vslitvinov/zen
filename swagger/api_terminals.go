
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type TerminalsApiService service
/*
TerminalsApiService Return information about payment methods on a Terminal
ZEN uses virtual Terminals to manage payment methods used by Merchants. By adding a currency parameter to the request, you will be returned with all payment methods that are enabled on the terminal, and which support payments in this currency. Each store uses a separate terminal. It allows you not only to have separate Terminal settings per each store, but also helps to verify the store which transactions come from.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param requestId A unique identifier generated by the requesting client
 * @param terminalId ID of the ZEN terminal
 * @param optional nil or *TerminalsApiInfoMethodsOpts - Optional Parameters:
     * @param "Currency" (optional.String) -  Currency
     * @param "ItemsPerPage" (optional.String) -  Limit of results
     * @param "Page" (optional.String) -  Page of results
     * @param "Direction" (optional.String) -  Direction of order
@return []MethodInformationObject
*/

type TerminalsApiInfoMethodsOpts struct {
    Currency optional.String
    ItemsPerPage optional.String
    Page optional.String
    Direction optional.String
}

func (a *TerminalsApiService) InfoMethods(ctx context.Context, requestId string, terminalId string, localVarOptionals *TerminalsApiInfoMethodsOpts) ([]MethodInformationObject, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []MethodInformationObject
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/terminals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(requestId) < 38 {
		return localVarReturnValue, nil, reportError("requestId must have at least 38 elements")
	}
	if strlen(requestId) > 1024 {
		return localVarReturnValue, nil, reportError("requestId must have less than 1024 elements")
	}
	if strlen(terminalId) < 3 {
		return localVarReturnValue, nil, reportError("terminalId must have at least 3 elements")
	}
	if strlen(terminalId) > 128 {
		return localVarReturnValue, nil, reportError("terminalId must have less than 128 elements")
	}

	if localVarOptionals != nil && localVarOptionals.Currency.IsSet() {
		localVarQueryParams.Add("currency", parameterToString(localVarOptionals.Currency.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ItemsPerPage.IsSet() {
		localVarQueryParams.Add("itemsPerPage", parameterToString(localVarOptionals.ItemsPerPage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Direction.IsSet() {
		localVarQueryParams.Add("direction", parameterToString(localVarOptionals.Direction.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["request-id"] = parameterToString(requestId, "")
	localVarHeaderParams["terminal-id"] = parameterToString(terminalId, "")
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []MethodInformationObject
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
